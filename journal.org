<25/11/2021>
* sujet : cabane à oiseaux
* TODO : se documenter :
  quels critères pour identifer facilement un oiseau ?
  quelles bibliothèques utiliser pour ça ?


<16/12/2021>
* FAIT : vu opencv. critères
* TODO :
  - se renseigner sur les fonctions d'openCV pour les couleurs, la taille et les formes
  - demander un Raspberry pi la prochaine fois ?

<24/01/2022>
* FAIT :
  - contour de l'oiseau
  - calcul du diamètre (openCV)
* TODO :
  - essayer une approche utilisant l'analyse chromatographique de l'image de
  l'oiseau (détouré). Quelle distance entre deux courbes de couleur ?
  - commencer par détecter si l'oiseau est de face ou de profil (plus grande
    surface ?)

<14/02/2022>
* FAIT: 
 - début de l'algo de reconnaissance selon la couleur
* TODO: 
 - revoir la méthode de reconnaissance (autre que la moyenne)
 - plus de test pour l'algo
 - commencer à travailler sur le matériel, réfléchir sur la récupération des images sur la caméra

<21/03/2022>
* FAIT:
 - algo de détection de l'oiseau
 - algo de reconnaissance selon la couleur
* TODO:
 - penser à installer RaspAP
 - connexion de la caméra (essayer la caméra usb)
 - passage de l'algo pour des vidéos
 - faire une normalisation de couleur par rapport à des points fixes sur le fond
 - trouver le moyen de tester en conditions réélles (enregistrer le flux vidéo pour refaire les tests)

 <04/04/2022>
 * FAIT:
 - configuration du RaspAP
 - test des masques avec un flux vidéo (sans oiseau pour l'instant)

* TODO
- detection de forme dans le masque
- caluler la meilleure image (la plus grande surface de points blancs)
- trouver un moyen de faire des tests en conditions réélles (ou via un flux vidéo)

<11/04/2022> 
* TODO:
- configurer le Raspberry pour réduire/supprimer les processus inutiles
- vérifier si le programme utilise la puce graphique
- optimiser le programme:
 + essayer de limiter le nombre d'images par seconde (1 puis 2 puis voir à partir de combien on a une execution fluide)
 + mesurer le nombre d'images par seconde que vous arriver à traiter
 + voir si c'est le rendu qui ralenti le programme (voir si on peut le faire tourner sur un serveur Web local: envoyer plutôt le flux sur le serveur au lieu de le transmettre par ssh)
 + essayer de parallèliser l'execution du programme (pensez à utiliser tous les processeurs du Raspberry)
